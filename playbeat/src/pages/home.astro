---
import Layout from '../layouts/Layout.astro';

import CarrouselTops from '@components/CarrouselTops.astro';
import Header from '../components/Header.astro';
import Saludos from '../components/Saludos.svelte';
import { Global } from "@/globalState/globalUrl.js";
import {getUserLastAudios} from '@/utils/getUserLastAudios.ts';
import CarrouselUser from '@components/CarrouselUser.astro';
import CarrouselLast from '@components/CarrouselLast.astro';
import { getLastAudiosUploaded } from '@/utils/getLastAudiosUploaded';
import { getTops } from '@/utils/getTops';
import { getRandomAudio } from '@/utils/getRandomAudio';







const user = JSON.parse(Astro.cookies.get("usuario")?.value as any)
const token = Astro.cookies.get("token")?.value as string

let lastAudios;
let lastSongsUploaded;
let tops;
let random;
try {
	let [responseLast, responesLastUploaded,responseTops, responseRandom] = await Promise.all([
		getUserLastAudios(token, 15),
		getLastAudiosUploaded(token),
		getTops(token),
		getRandomAudio(token, 10)
	]);

	lastAudios = responseLast.data;
	lastSongsUploaded = responesLastUploaded.data.cancion;
	tops = responseTops.data;
	// console.log("tops",tops)
	random = responseRandom.data;
	// console.log("random",random)

} catch (error) {
	console.error("Error")
}	


const idAudioSet = new Set<number>();

// Crea un nuevo array para almacenar los elementos sin duplicados
const vectorSinDuplicados: typeof lastAudios.cancion = [];

// Itera sobre el vector original
for (const item of lastAudios.cancion) {
    // Si el idAudio no está en el Set, añádelo
    if (!idAudioSet.has(item.idAudio)) {
        // Añade el idAudio al Set
        idAudioSet.add(item.idAudio);
        // Añade el elemento al nuevo array
        vectorSinDuplicados.push(item);
    }
}

---
<Layout title="PlayBeat">

	<div class=" flex flex-col w-full   text-white">

		<Header />

		<div class=" w-full h-full flex flex-col mt-16 p-1">
			<Saludos name={user.nombreUsuario}/>
			{vectorSinDuplicados && 
			<section class="mt-10 w-full">
				<h2 class="text-lg font-semibold ml-10">Últimos escuchados</h2>
				<CarrouselLast  info={vectorSinDuplicados}/>
			</section>}
			{lastSongsUploaded && 
			<section class="mt-10 w-full">
				<h2 class="text-lg font-semibold ml-10">Últimos lanzamientos</h2>
				<CarrouselUser  audios={lastSongsUploaded}/>
			</section>}
			{
				tops && <section class="mt-10 w-full">
					<h2 class="text-lg font-semibold ml-10">Top diario</h2>
					<CarrouselTops  audios={tops}/>
				</section>
			}
			<section class="mt-10 w-full">
				<h2 class="text-lg font-semibold ml-10">PlayBeat recomienda</h2>
				<CarrouselUser  audios={random}/>
			</section>
			<!-- {Canciones.map( (element) =>
				{
					return <Carrousel info={element} />
				}
 
			)}	 -->
			
		</div>
	</div>
	<script is:inline>

		document.addEventListener('astro:page-load', () => {

			// Selecciona los elementos SVG y el carrusel
			const leftArrow = document.querySelectorAll('.icon-tabler-chevron-compact-left');
			const rightArrow = document.querySelectorAll('.icon-tabler-chevron-compact-right');
			const carrusel = document.querySelectorAll('.carrusel') ;
			if(leftArrow && rightArrow && carrusel){
			
				for(let i = 0; i < carrusel.length; i++) {
	
					leftArrow[i].addEventListener('click', () => {
						let width = carrusel[i].offsetWidth;
						carrusel[i].scrollBy({ left: -width, behavior: 'smooth' });
					});
				
					rightArrow[i].addEventListener('click', () => {
						let width = carrusel[i].offsetWidth;
						carrusel[i].scrollBy({ left: width, behavior: 'smooth' });
					});
				}
			}
		})
	  </script>
	  <script is:inline>
		document.addEventListener('astro:after-swap', () => {
			window.dispatchEvent(new Event('storageChange'));

		});
	  </script>
	  <script>
		import { connectToSocket } from "@/utils/sync.ts";
		
		function getCookie(name: any) {
			let cookieArr = document.cookie.split("; ");
			
			for(let i = 0; i < cookieArr.length; i++) {
				let cookiePair = cookieArr[i].split("=");
				
				if(name == cookiePair[0]) {
					return decodeURIComponent(cookiePair[1]);
				}
			}
		}
		document.addEventListener("astro:page-load", () => {
			console.log("conectado a sync")
			const token = getCookie("token") as string;
			 // Creamos la conexión con el websocket.
			connectToSocket(token, -1); // Creamos la conexión con el websocket.
			console.log("Ya deberia estar conectado");
		})


	  </script>

</Layout>


<style>

.carrusel{
	scrollbar-width: none;
	--ancho-padre: 100%;
}
.hijo{
	min-width: calc(var(--ancho-padre) / 4);
}



.button {
    background-color: black;
    border: 2px solid black;
    border-radius: 30px;
	width: 30px;
	height: 30px;
    border: none;
    color: white;
    font-weight: semibold;
    cursor: pointer;
    padding: 8px;
}
.buttonOculto {
    background-color: black;
    border: 2px solid black;
    border-radius: 30px;
	width: 30px;
	height: 30px;
    border: none;
    color: white;
    font-weight: semibold;
    cursor: pointer;
    padding: 8px;
	display:none;
}

  
  
.div {
  position: relative;
  display: inline-block;
}

.dropdown {
  display: none;
  position: absolute;
  background-color: #2f2f2f;

  min-width: 100px;
  border-radius: 10px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 100;
}

.dropdown span {
  color: white;

  padding: 12px 16px;

  text-decoration: none;
  display: flex;
  cursor: pointer;
  font-weight: normal;
  font-size: medium;
}

.dropdown span{
  border-top: .5px solid white;

}
.dropdown span:first-child{
  border-top: 0px;
  border-top-left-radius:10px;
  border-top-right-radius:10px;
}
.dropdown span:last-child{

  border-bottom-left-radius:10px;
  border-bottom-right-radius:10px;
}

.dropdown span:hover {background-color: #6e6e6e;}

.button:focus ~ .dropdown {display: flex; flex-direction: column;}
.button:focus ~ .buttonOculto {display: flex; position:absolute; top: 0; left: 0;}




</style>