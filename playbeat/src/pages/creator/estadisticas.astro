---
import CreatorLayout from '@layouts/CreatorLayout.astro';
import HeaderCreator from '@components/HeaderCreator.astro';
import Stats1 from '@components/Stats1.astro';
import { TOKEN } from '@/constants';
import { getMyAudios } from '@/utils/getMyAudios';
import { getMyUserInfo } from '@/utils/getMyUserInfo';
import { getStatsUser } from '@/utils/getStatsUser';
import { Global } from '@/globalState/globalUrl';


setTimeout(() => {
    
}, 100);

const token = Astro.cookies.get(TOKEN);

let response
let user
let res
let datosRep : any  
let datosUser : any
let vectorMeses :any

let meses = ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"];
    let date = new Date();
    let mesActual = date.getMonth();

    vectorMeses = []
    for (let i = 0; i < 12; i++) {
        vectorMeses.unshift(meses[(mesActual - i + 12) % 12]);
    }
    console.log(vectorMeses)

try{


    let date = new Date();
    date.setFullYear(date.getFullYear() - 1);

    let month = date.getMonth() + 2; // Los meses en JavaScript son 0-indexados
    let year = date.getFullYear();

    let formattedDate = (month < 10 ? '0' : '') + month + '-' + year;
    let [responseRes, userResponse, res] = await Promise.all([
        getMyAudios(token?.value),
        getMyUserInfo(token?.value),
        getStatsUser(token?.value,{date:formattedDate})
    ]);
    datosRep = res.data.escuchasUsuarioMensuales.map((r:any) => r.escuchas);
    datosUser = res.data.alcanceMensual.map((r:any) => r.alcance);
    response = responseRes.data;
    user = userResponse.data;


}catch(e){
    console.log(e)
}

---

<CreatorLayout title="PlayBeat">
    <div class=" w-full bg-[#333] bg-opacity-60 flex flex-col items-center">
        <HeaderCreator />
        <div class="flex flex-col items-center mt-5 gap-3">
            <h1 class="text-5xl text-bluePB font-bold">PLAYBEAT</h1>
            <h2 class="text-6xl font-semibold">ESTADISTICAS</h2>
        </div>
        <div class=" w-full flex flex-row flex-wrap justify-center gap-4 mt-5">
            <Stats1 name={["Reproducciones","Ultimos 30 dias","Totales"]} num={[datosRep[datosRep.length-1],user.oyentesMensuales,user.nEscuchas]} idNum="1" />
            <Stats1 name={["Oyentes","Ultimos 30 dias","Totales"]} num={[datosUser[datosUser.length-1], user.usuariosAlcanzados, user.usuariosAlcanzadosUltimoMes]} idNum="2"/>
        </div>     
        <section class="px-16 w-full mt-12">
          <table class="mt-8 table-auto w-full">
            <thead class="opacity-60">
                <tr class="text-left">
                    <th class="pb-2 pl-3">Canción</th>
                    <th>Artista</th>
                    <th class="max-w-6">Duración</th>
                    <th class="w-9">Reproducciones</th>
                </tr>
            </thead>
            <tbody class="border-t-[1px] border-white border-opacity-60">
                {response.cancion.map((cancion:any, index:number) => (
                      <tr class=" hover:bg-[#262626]" data-url={"stats/"+cancion.idAudio}>
                        <td class="py-3 pl-3 flex flex-row items-center gap-3">
                            <div class=" h-12 aspect-square bg-black rounded-[4px]">
                                <img class="h-full w-full object-cover rounded-[4px]" src={`${Global.url}foto/${cancion.imgAudio}`} alt=""/>
                            </div>
                            <p>{cancion.titulo}</p>
                        </td>
                        <td class="py-3">                            
                        {
                                cancion && cancion.artistas.map((artista :any, index:any) => 
                                    
                                        <p class="text-gray-400">{( index == cancion.artistas?.length-1  )? artista.nombreUsuario : artista.nombreUsuario + ', '}</p>
                                        

                                )
                            }</td>
                        <td class="py-3 max-w-6 ">{cancion.duracionSeg}</td>
                        <td class="max-w-3 cursor-pointer pr-3">
                            <p>{cancion.vecesEscuchada}</p>
                        </td>
                    </tr>

                ))
                }
            </tbody>
            <script>

                document.addEventListener("astro:page-load", function() {
                  var rows = document.querySelectorAll("tbody tr");
                  rows.forEach(function(row) {
                    row.addEventListener("click", function(this: HTMLElement) {
                      var url = this.getAttribute("data-url");
                      if (url) {
                        document.cookie = "statsAudio=" + (row.children[0].children[1].textContent || "") + "|" + (row.children[3].textContent || "") + "; path=/";                        window.location.href = url;
                        
                      }
                    });
                  });
                });
              </script>
        </table>
        </sect>
        
    </div>
</CreatorLayout>
<script is:inline src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script is:inline define:vars={{datosUser, datosRep, vectorMeses}} >
    function initCharts(datosRep, datosUser, vectorMeses){

    var options = {
          series: [{
          name: 'series1',
          data: datosRep
        }],
          chart: {
            height: 250,
            width: "100%",
            type: 'area',
            toolbar: {
                show: false,
            },
            animations: {
                enabled: true,
                easing: 'easeinout',
                speed: 800,
                animateGradually: {
                    enabled: true,
                    delay: 150
                },
                dynamicAnimation: {
                    enabled: true,
                    speed: 350
                }
            }
            ,
        },
        grid:{
            show: true,
            borderColor: '#ffffff56',
        },
        dataLabels: {
          enabled: false
        },
        stroke: {
          curve: 'smooth'
        },
        xaxis: {
          type: 'string',
          categories: vectorMeses,
          labels:{
            show:true,
            style:{
                colors: '#ffffff'
            }
          }
        },
        yaxis: {
          type: 'string',
          min: 0,
          max: () => {return Math.ceil(Math.max(...datosRep) / 100) * 100;},
          tickAmount: 4,
          labels:{
            show:true,
            style:{
                colors: '#ffffff'
            }
          }
        },
        tooltip: {
          enabled: false
          
          

        },
 
        
        };
        var options2 = {
          series: [{
          name: 'series1',
          data: datosUser
        }],
          chart: {
            height: 250,
            width: "100%",
            type: 'area',
            toolbar: {
                show: false,
            },
            animations: {
                enabled: true,
                easing: 'easeinout',
                speed: 800,
                animateGradually: {
                    enabled: true,
                    delay: 150
                },
                dynamicAnimation: {
                    enabled: true,
                    speed: 350
                }
            }
            ,
        },
        grid:{
            show: true,
            borderColor: '#ffffff56',
        },
        dataLabels: {
          enabled: false
        },
        stroke: {
          curve: 'smooth'
        },
        xaxis: {
          type: 'string',
          categories: vectorMeses,
          labels:{
            show:true,
            style:{
                colors: '#ffffff'
            }
          }
        },
        yaxis: {
          type: 'string',
          min: 0,
          max: () => {return Math.ceil(Math.max(...datosUser) / 10) * 10;},
          tickAmount: 4,
          labels:{
            show:true,
            style:{
                colors: '#ffffff'
            }
          }
        },
        tooltip: {
          enabled: false
          
          

        },
 
        
        };

        var chart1 = new ApexCharts(document.querySelector("#chart1"), options);
        var chart2 = new ApexCharts(document.querySelector("#chart2"), options2);
        if(chart1.el != null  && chart2.el != null){
            chart1.render(datosRep);
            chart2.render(datosUser);
        }

    }
      setTimeout(() => {
        initCharts(datosRep,datosUser, vectorMeses)
      }, 100); 
    


      
</script>
